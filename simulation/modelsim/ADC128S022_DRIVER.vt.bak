// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/03/2022 20:21:15"
                                                                                
// Verilog Test Bench template for design : ADC128S022_DRIVER
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module ADC128S022_DRIVER_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg ADC_SDAT;
reg clk_in;
reg reset;
reg start_convert;
// wires                                               
wire ADC_CS_N;
wire ADC_SADDR;
wire ADC_SCLK;
wire [15:0] data_out;

// assign statements (if any)                          
ADC128S022_DRIVER i1 (
// port map - connection between master ports and signals/registers   
	.ADC_CS_N(ADC_CS_N),
	.ADC_SADDR(ADC_SADDR),
	.ADC_SCLK(ADC_SCLK),
	.data_out(data_out),
	.ADC_SDAT(ADC_SDAT),
	.clk_in(clk_in),
	.reset(reset),
	.start_convert(start_convert)
);
initial begin
ADC_SDAT <= 1'b0;
reset <= 1'b0;
clk_in <= 1'b0;    
start_convert <= 1'b0; 
reset <= 1'b1;
#10000 start_convert <= 1'b1;  
#3110  ADC_SDAT <= 1'b1;
#680                                         
#6210 start_convert <= 1'b0;


               
$display("Running testbench");                       
end     
                                               
always 
#10 clk_in <= !clk_in;                                              
endmodule

